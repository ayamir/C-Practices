* 一致性模型
并行执行的多个线程可以看作是一种分布式系统，在分布式系统中，任何通信甚至本地操作都需要消耗一定时间，甚至出现不可靠的通信

如果强行将一个变量 v 在多个线程之间的操作设为原子操作，则对于变量 v 而言，表现为顺序执行的程序，并没有由于引入多线程而得到任何效率上的收益

因此可以考虑削弱原子操作在进程间的同步条件
主要有四种不同的一致性模型
** 线性一致性——原子一致性
任何一次读操作都能读到某个数据的最近一次写的数据，并且所有线程的操作顺序和时钟顺序一致
[[file:一致性模型/2021-03-16_15-00-49_screenshot.png]]
T1 中的 x.store(1) 严格发生在 T2 的 x.store(2) 之前
T2 中的 x.store(2) 严格发生在 T1 的 x.load() 之前
线性一致性对全局时钟的要求是难以实现的
** 顺序一致性
要求任何一次读操作都能读到数据最近一次写入的数据，但不要求与全局时钟的顺序一致
[[file:一致性模型/2021-03-16_15-05-07_screenshot.png]]
x.load() 必须读到最近一次写入的数据即 x.store(3) 之后紧挨着是 x.load()
x.store(2) 和 x.store(1) 的顺序没有任何先后保障
** 因果一致性
只需要有因果关系的操作顺序得到保证
[[file:一致性模型/2021-03-16_15-08-04_screenshot.png]]
整个过程中只有 c 对 a 和 b 产生依赖，而 x 和 y 没有关系
** 最终一致性
只要某个操作在未来的某个时间节点上会被观察到，但没有要求被观察到的时间
因此理论上可以规定某个操作被观察到的时间总是有界的
[[file:一致性模型/2021-03-16_15-10-05_screenshot.png]]
